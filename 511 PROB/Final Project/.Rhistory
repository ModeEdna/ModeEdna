theme(plot.title = element_text(size = 11, hjust = 0.5), plot.caption = element_text(hjust = 0.5), axis.title = element_text(size = 9))
# popularity.hist
# boxplot for non-audio feature variable (response variable - popularity)
# track.popularity
popularity.box <- edy %>%
ggplot(aes(x = track.popularity)) +
geom_boxplot(fill = '#88ccee') +
labs(title = "Boxplot Distribution of Song Popularity") +
xlab("Popularity") +
annotate("text", x=12, y=0.35, label= "median = 57") +
theme(plot.title = element_text(size = 11, hjust = 0.5), plot.caption = element_text(hjust = 0.5), axis.title = element_text(size = 9))
#popularity.box
# Histogram for non-audio feature variable (response variable - popularity)
library(ggplot2)
library(dplyr)
# track.popularity
popularity.hist <- ggplot(edy, aes(x=track.popularity))+
geom_histogram(binwidth = 5, color="black", fill="#88ccee")+
labs(title="Histogram Distribution of Song Popularity",x="Popularity", y = "Count")+
scale_x_continuous(breaks=seq(0,90,10))+
scale_y_continuous(breaks=seq(0,125,25))+
annotate("text", x=8, y=100, label= "mean = 53")+
theme(plot.title = element_text(size = 11, hjust = 0.5), plot.caption = element_text(hjust = 0.5), axis.title = element_text(size = 9))
# popularity.hist
# boxplot for non-audio feature variable (response variable - popularity)
# track.popularity
popularity.box <- edy %>%
ggplot(aes(x = track.popularity)) +
geom_boxplot(fill = '#88ccee') +
labs(title = "Boxplot Distribution of Song Popularity") +
xlab("Popularity") +
annotate("text", x=12, y=0.35, label= "median = 57") +
theme(plot.title = element_text(size = 11, hjust = 0.5), plot.caption = element_text(hjust = 0.5), axis.title = element_text(size = 9))
#popularity.box
# Display EDA for Song Popularity
# Histogram and Boxplot arranged in 1x2 grid
grid.arrange(popularity.hist, popularity.box, ncol = 2, bottom=textGrob("Figure 4.1: Distribution of Song Popularity", gp = gpar(fontsize = 9)))
# Histogram for non-audio feature variable (response variable - popularity)
library(ggplot2)
library(dplyr)
library(gridExtra)
library(grid)
# track.popularity
popularity.hist <- ggplot(edy, aes(x=track.popularity))+
geom_histogram(binwidth = 5, color="black", fill="#88ccee")+
labs(title="Histogram Distribution of Song Popularity",x="Popularity", y = "Count")+
scale_x_continuous(breaks=seq(0,90,10))+
scale_y_continuous(breaks=seq(0,125,25))+
annotate("text", x=8, y=100, label= "mean = 53")+
theme(plot.title = element_text(size = 11, hjust = 0.5), plot.caption = element_text(hjust = 0.5), axis.title = element_text(size = 9))
# popularity.hist
# boxplot for non-audio feature variable (response variable - popularity)
# track.popularity
popularity.box <- edy %>%
ggplot(aes(x = track.popularity)) +
geom_boxplot(fill = '#88ccee') +
labs(title = "Boxplot Distribution of Song Popularity") +
xlab("Popularity") +
annotate("text", x=12, y=0.35, label= "median = 57") +
theme(plot.title = element_text(size = 11, hjust = 0.5), plot.caption = element_text(hjust = 0.5), axis.title = element_text(size = 9))
#popularity.box
# Display EDA for Song Popularity
# Histogram and Boxplot arranged in 1x2 grid
grid.arrange(popularity.hist, popularity.box, ncol = 2, bottom=textGrob("Figure 4.1: Distribution of Song Popularity", gp = gpar(fontsize = 9)))
# Histograms for audio feature variables (only 6 we want EDA for in report, others will be in Appendix)
# danceability, energy, loudness, acousticness, valence, & tempo
# color pallete (3rd down with 12 colors): https://stackoverflow.com/questions/57153428/r-plot-color-combinations-that-are-colorblind-accessible
# danceability
dance.hist <- ggplot(edy, aes(x=danceability))+
geom_histogram(binwidth = .1, color="black", fill="#cc6677")+
labs(x="Danceability", y = "Count")+
scale_x_continuous(breaks=c(0.25,0.50,0.75,1.00))+
scale_y_continuous(breaks=seq(0,200,50))+
annotate("text", x=0.25, y=200, label= "mean = 0.55",
size = 3)+
theme(plot.title = element_text(hjust = 0.5), axis.title = element_text(size = 9))
#dance.hist
# energy
energy.hist <- ggplot(edy, aes(x=energy))+
geom_histogram(binwidth = .1, color="black", fill="#aa4499")+
labs(x="Energy", y = "Count")+
scale_x_continuous(breaks=c(0.00,0.25,0.50,0.75,1.00))+
scale_y_continuous(breaks=seq(0,200,50))+
annotate("text", x=0.15, y=200, label= "mean = 0.62",
size = 3)+
theme(plot.title = element_text(hjust = 0.5), axis.title = element_text(size = 9))
#energy.hist
# loudness
loud.hist <- ggplot(edy, aes(x=loudness))+
geom_histogram(bins = 10, color="black", fill="#661100")+
labs(x="Loudness", y = "Count")+
scale_y_continuous(breaks=seq(0,375,75))+
annotate("text", x=-28.5, y=375, label= "mean = -8.62",
size = 3)+
theme(plot.title = element_text(hjust = 0.5), axis.title = element_text(size = 9))
#loud.hist
# acousticness
acous.hist <- ggplot(edy, aes(x=acousticness))+
geom_histogram(binwidth = .1, color="black", fill="#44aa99")+
labs(x="Acousticness", y = "Count")+
scale_x_continuous(breaks=c(0.00, 0.25,0.50,0.75,1.00))+
annotate("text", x=0.83, y=300, label= "mean = 0.33",
size = 3)+
theme(plot.title = element_text(hjust = 0.5), axis.title = element_text(size = 9))
#acous.hist
# valence
val.hist <- ggplot(edy, aes(x=valence))+
geom_histogram(binwidth = .1, color="black", fill="#999933")+
labs(x="Valence", y = "Count")+
scale_y_continuous(breaks=seq(0,125,25))+
annotate("text", x=0.85, y=125, label= "mean = 0.48",
size = 3)+
theme(plot.title = element_text(hjust = 0.5), axis.title = element_text(size = 9))
#val.hist
# tempo
tempo.hist <- ggplot(edy, aes(x=tempo))+
geom_histogram(bins = 10, color="black", fill="#888888")+
labs(x="Tempo", y = "Count")+
scale_y_continuous(breaks=seq(0,250,50))+
annotate("text", x=180, y=275, label= "mean = 119.87",
size = 3)+
theme(plot.title = element_text(hjust = 0.5), axis.title = element_text(size = 9))
#tempo.hist
# Display only 6 EDA chosen variables, other 3 variables are in Appendix
# Histograms arranged in 2x3 grid
grid.arrange(dance.hist, energy.hist, loud.hist, acous.hist, val.hist, tempo.hist, ncol = 3, bottom=textGrob("Figure 4.2: Histograms of Predictor Variables", gp = gpar(fontsize = 9)))
# Bar plot of decade variable, count of songs by decade
# get counts
#table(edy['decade'])
# 1950s 1960s 1970s 1980s 1990s 2000s 2010s 2020s
#    2     8    43    67    83   331   392    50
decade.totals <- data.frame(Decade=c("1950s","1960s","1970s","1980s",
"1990s","2000s","2010s","2020s"),
Count=c(2,8,43,67,83,331,392,50))
ggplot(decade.totals, aes(x=Decade, y=Count, fill=Decade)) +
geom_bar(stat="identity")+
labs(title="Count of Songs by Decade", x="Decade", y = "Count",
caption = "Figure 4.3: Barplot of Songs by Decade")+
scale_fill_manual(values=c("#888888", "#DDCC77", "#AA4499", "#332288",
"#CC6677", "#88CCEE", "#44AA99", "#117733"))+
theme(plot.title = element_text(hjust = 0.5), plot.caption = element_text(hjust = 0.5))+
geom_text(aes(label = Count), vjust = -0.2)
# color pallete (3rd down with 12 colors): https://stackoverflow.com/questions/57153428/r-plot-color-combinations-that-are-colorblind-accessible
# track.album.release_date
date.hist <- ggplot(edy, aes(x=track.album.release_date))+
geom_histogram(binwidth = 2, color="black", fill="#332288")+
labs(title="Distribution of Release Date",x="Year", y = "Count")+
scale_x_continuous(breaks=c(1950,1960,1970,1980,1990,2000,2010,2020))+
scale_y_continuous(breaks=seq(0,150,25))+
annotate("text", x=1958, y=125, label= "mean = 2005")+
theme(plot.title = element_text(hjust = 0.5), plot.caption = element_text(hjust = 0.5))
date.hist
# track.duration_s
duration.hist <- ggplot(edy, aes(x=track.duration_s))+
geom_histogram(binwidth = 30, color="black", fill="#882255")+
labs(title="Distribution of Song Duration (seconds)",x="Duration (in seconds)", y = "Count")+
scale_x_continuous(breaks=seq(0,900,60))+
scale_y_continuous(breaks=seq(0,250,50))+
annotate("text", x=90, y=225, label= "mean = 246")+
theme(plot.title = element_text(hjust = 0.5), plot.caption = element_text(hjust = 0.5))
duration.hist
# color pallete (3rd down with 12 colors): https://stackoverflow.com/questions/57153428/r-plot-color-combinations-that-are-colorblind-accessible
# speechiness
speech.hist <- ggplot(edy, aes(x=speechiness))+
geom_histogram(binwidth = .05, color="black", fill="#ddcc77")+
labs(title="Distribution of Speechiness",x="Speechiness", y = "Count")+
scale_x_continuous(breaks=c(0.0, 0.1, 0.2, 0.3, 0.4, 0.5))+
annotate("text", x=0.5, y=750, label= "mean = 0.07")+
theme(plot.title = element_text(hjust = 0.5))
speech.hist
# instrumentalness
instr.hist <- ggplot(edy, aes(x=instrumentalness))+
geom_histogram(binwidth = .1, color="black", fill="#6699cc")+
labs(title="Distribution of Instrumentalness",x="Instrumentalness", y = "Count")+
annotate("text", x=1, y=800, label= "mean = 0.14")+
theme(plot.title = element_text(hjust = 0.5))
instr.hist
# liveness
live.hist <- ggplot(edy, aes(x=liveness))+
geom_histogram(binwidth = .1, color="black", fill="#117733")+
labs(title="Distribution of Liveness",x="Liveness", y = "Count")+
scale_y_continuous(breaks=seq(0,500,100))+
annotate("text", x=1, y=550, label= "mean = 0.19")+
theme(plot.title = element_text(hjust = 0.5))
live.hist
# Load packages
library(tidyverse)
library(caret)
# Read in the data
songs <- read_csv('./edyPlaylist.csv')
# Select only the features which we wish to include
song_vars <- songs %>%
select(-c(...1, track.name, track.album.release_date, track.album.album_type, Playlist))
# Load packages
library(tidyverse)
library(caret)
# Read in the data
songs <- read_csv('./edyPlaylist.csv')
# Select only the features which we wish to include
song_vars <- songs %>%
select(-c(...1, track.name, track.album.release_date, track.album.album_type, Playlist))
fit1 <- lm(track.popularity~(danceability + energy + loudness + speechiness + acousticness + instrumentalness + liveness + tempo + track.duration_ms + valence), data=train.data)
# Load packages
library(tidyverse)
library(caret)
# Read in the data
songs <- read_csv('./edyPlaylist.csv')
# Select only the features which we wish to include
song_vars <- songs %>%
select(-c(...1, track.name, track.album.release_date, track.album.album_type, Playlist))
# Train test split
set.seed(0716)
# Do train test split (point i)
training.samples <- song_vars$track.popularity %>%
createDataPartition(p = 0.8) # Do split
train.data  <- song_vars[training.samples$Resample1, ] # Train data
test.data <- song_vars[-training.samples$Resample1, ] # Test data
#print(paste0("Training observations: ", dim(train.data)[1], " Test observations: ", dim(test.data)[1])) # Check dimensions
fit1 <- lm(track.popularity~(danceability + energy + loudness + speechiness + acousticness + instrumentalness + liveness + tempo + track.duration_ms + valence), data=train.data)
summary(fit1)
car::vif(fit1)
fit3 <- lm(track.popularity~(danceability + loudness + speechiness + acousticness + instrumentalness + liveness + tempo + track.duration_ms + valence)^2, data=train.data)
summary(fit3)
fit2 <- lm(track.popularity~(danceability + loudness + speechiness + acousticness + instrumentalness + liveness + tempo + track.duration_ms + valence), data=train.data)
summary(fit2)
car::vif(fit1)
fit4 <- lm(track.popularity~(track.duration_ms + danceability + loudness + acousticness + valence + instrumentalness + track.duration_ms*danceability + loudness*acousticness + acousticness*liveness + instrumentalness*valence), data=train.data)
summary(fit4)
# Code adapted from Dr. Purna Gamage, Georgetown University
# Make predictions
predictions1 <- fit1 %>% predict(test.data)
p1=data.frame(
RMSE = RMSE(predictions1, test.data$track.popularity),
R2 = R2(predictions1, test.data$track.popularity)
)
# Make predictions
predictions2 <- fit2 %>% predict(test.data)
p2=data.frame(
RMSE = RMSE(predictions2, test.data$track.popularity),
R2 = R2(predictions2, test.data$track.popularity)
)
# Make predictions
predictions3 <- fit3 %>% predict(test.data)
p3=data.frame(
RMSE = RMSE(predictions3, test.data$track.popularity),
R2 = R2(predictions3, test.data$track.popularity)
)
predictions4 <- fit4 %>% predict(test.data)
p4=data.frame(
RMSE = RMSE(predictions4, test.data$track.popularity),
R2 = R2(predictions4, test.data$track.popularity)
)
# Join the rows
all =rbind(p1,p2,p3,p4)
# Get all F-statistics
all=cbind(all, c(summary(fit1)$fstatistic[1],summary(fit2)$fstatistic[1],summary(fit3)$fstatistic[1],summary(fit4)$fstatistic[1]))
# Get all r-sqared statistics
all=cbind(all,c(summary(fit1)$adj.r.squared,summary(fit2)$adj.r.squared,summary(fit3)$adj.r.squared,summary(fit4)$adj.r.squared))
# Get all sigma values
all=cbind(all,c(summary(fit1)$sigma,summary(fit2)$sigma,summary(fit3)$sigma,summary(fit4)$sigma))
all = cbind(all, c('fit1','fit2','fit3','fit4'))
colnames(all)[c(3,4,5,6)]<-c("F stat","Adj R^2", "RSE","models")
all[,c(3,4,5,6)]
par(mfrow=c(2,2))
plot(fit4)
par(mfrow=c(2,2))
plot(fit4)
View(E)
# Boxplots for variables of interest
# Boxplot for danceability variable
dance.box <- both %>%
ggplot( aes(x = country, y = danceability, fill=country)) +
geom_boxplot() + labs(title = "Danceability")+
scale_fill_manual(values = c("#6699cc", "#cd5c5c")) +
xlab("Country") + ylab("Danceability")+
scale_y_continuous(breaks = c(0.25,0.50,0.75,1.00))+
theme(plot.title = element_text(hjust = 0.5), plot.caption = element_text(hjust = 0.5), legend.position="none")
# load libraries
library(Rspotify)
library(httr)
library(jsonlite)
library(spotifyr)
library(dplyr)
# authenticate user
my_token <- get_spotify_access_token(client_id='71995685ca2446b2b6e2e41d3e0e5b7a', client_secret='c36f1c3a69a241d4a8d45240c42873b0')
# grab the playlist of Top 50 Mexico
mex <- get_playlist_audio_features(
username = 'spotify',
playlist_uris = '37i9dQZEVXbO3qyFxbkOE1',
authorization = my_token)
# select the columns we want
filteredMex <- mex %>% select(track.name, track.album.release_date, track.popularity, track.album.album_type, track.duration_ms, danceability, energy, loudness, speechiness, acousticness, instrumentalness, liveness, valence, tempo)
# add playlist column
filteredMex$Playlist <- 'Mex50'
# export to csv, commenting out because we don't need to do this again
# write.csv(filteredE, './edyPlaylist.csv')
# show first 5 rows
df <- as.data.frame(filteredMex)
head(df)
library(ggplot2)
library(tidyverse)
library(psych)
library(dplyr)
library(arsenal)
library(gridExtra)
library(grid)
# Load data
# Top 50 USA
usa <- read.csv('./GitHub/filtered_usa_top50.csv')
# Top 50 UK
uk <- read.csv('./GitHub/filtered_uk_top50.csv')
# adding "country" column to each df; will be used for EDA purposes
usa$country <- "USA"
uk$country <- "UK"
# combine usa and uk into one df
both <- rbind(usa, uk)
# create df of both with just three variables (danceability, energy, and valence) of interest and country
both.interest <- both %>% select(danceability, energy, valence, country)
# summary statistics - USA
summary(usa[c('danceability', 'energy', 'valence')])
# summary statistics - UK
summary(uk[c('danceability', 'energy', 'valence')])
# Boxplots for variables of interest
# Boxplot for danceability variable
dance.box <- both %>%
ggplot( aes(x = country, y = danceability, fill=country)) +
geom_boxplot() + labs(title = "Danceability")+
scale_fill_manual(values = c("#6699cc", "#cd5c5c")) +
xlab("Country") + ylab("Danceability")+
scale_y_continuous(breaks = c(0.25,0.50,0.75,1.00))+
theme(plot.title = element_text(hjust = 0.5), plot.caption = element_text(hjust = 0.5), legend.position="none")
#dance.box
# Boxplot for energy variable
energy.box <- both %>%
ggplot( aes(x = country, y = energy, fill=country)) +
geom_boxplot() + labs(title = "Energy")+
scale_fill_manual(values = c("#6699cc", "#cd5c5c")) +
xlab("Country") + ylab("Energy")+
theme(plot.title = element_text(hjust = 0.5), plot.caption = element_text(hjust = 0.5), legend.position="none")
#energy.box
# Boxplot for valence variable
valence.box <- both %>%
ggplot( aes(x = country, y = valence, fill=country)) +
geom_boxplot() + labs(title = "Valence")+
scale_fill_manual(values = c("#6699cc", "#cd5c5c")) +
xlab("Country") + ylab("Valence")+
theme(plot.title = element_text(hjust = 0.5), plot.caption = element_text(hjust = 0.5), legend.position="none")
#valence.box
# Display Boxplots for chosen variables
# Boxplots arranged in 1x3 grid
grid.arrange(dance.box, energy.box, valence.box, ncol = 3, bottom=textGrob("Figure 1.1: Boxplots of Variables of Interest", gp = gpar(fontsize = 9)))
set.seed(1999)
# Hypothesis Testing - T-test for danceability
uk.dance <- subset(both.interest, select=danceability, subset=country=="UK", drop=T)
usa.dance <- subset(both.interest, select=danceability,subset=country=="USA", drop=T)
t.test(uk.dance, usa.dance, alt="greater")
# Boxplots for variables of interest
# Boxplot for danceability variable
dance.box <- both %>%
ggplot( aes(x = country, y = danceability, fill=country)) +
geom_boxplot() + labs(title = "Danceability") +
scale_fill_manual(values = c("#6699cc", "#cd5c5c")) +
xlab("Country") + ylab("Danceability") +
scale_y_continuous(breaks = c(0.25,0.50,0.75,1.00)) +
theme(plot.title = element_text(hjust = 0.5), plot.caption = element_text(hjust = 0.5), legend.position="none")
#dance.box
# Boxplot for energy variable
energy.box <- both %>%
ggplot( aes(x = country, y = energy, fill=country)) +
geom_boxplot() + labs(title = "Energy") +
scale_fill_manual(values = c("#6699cc", "#cd5c5c")) +
xlab("Country") + ylab("Energy") +
theme(plot.title = element_text(hjust = 0.5), plot.caption = element_text(hjust = 0.5), legend.position="none")
#energy.box
# Boxplot for valence variable
valence.box <- both %>%
ggplot( aes(x = country, y = valence, fill=country)) +
geom_boxplot() + labs(title = "Valence") +
scale_fill_manual(values = c("#6699cc", "#cd5c5c")) +
xlab("Country") + ylab("Valence") +
theme(plot.title = element_text(hjust = 0.5), plot.caption = element_text(hjust = 0.5), legend.position="none")
#valence.box
# Display Boxplots for chosen variables
# Boxplots arranged in 1x3 grid
grid.arrange(dance.box, energy.box, valence.box, ncol = 3, bottom=textGrob("Figure 1.1: Boxplots of Variables of Interest", gp = gpar(fontsize = 9)))
# Histogram for danceability variable, side-by-side
uk.dance.hist <- ggplot(uk, aes(x=danceability)) +
geom_histogram(binwidth=.1, color="black", fill="#6699cc") +
labs(x="Danceability (UK) ", y = "Count") +
scale_x_continuous(breaks=c(0.25,0.50,0.75,1.00)) +
scale_y_continuous(breaks=seq(0,20,2)) +
annotate("text", x=0.25, y=15, label= "mean = 0.64", size = 3) +
theme(plot.title = element_text(size = 10, hjust = 0.5), axis.title = element_text(size = 9))
#uk.dance.hist
usa.dance.hist <- ggplot(usa, aes(x=danceability)) +
geom_histogram(binwidth=.1, color="black", fill="#cd5c5c") +
labs(x="Danceability (USA)", y = NULL) +
scale_x_continuous(breaks=c(0.25,0.50,0.75,1.00)) +
scale_y_continuous(breaks=seq(0,20,2)) +
annotate("text", x=0.25, y=14, label= "mean = 0.63", size = 3) +
theme(plot.title = element_text(size = 10, hjust = 0.5), axis.title = element_text(size = 9))
#usa.dance.hist
#grid.arrange(uk.dance.hist, usa.dance.hist, ncol = 2, bottom=textGrob("Figure 1.4: Histograms of Danceability by Country", gp = gpar(fontsize = 9)))
# Histogram for energy variable, side-by-side
uk.energy.hist <- ggplot(uk, aes(x=energy)) +
geom_histogram(binwidth=.1, color="black", fill="#6699cc") +
labs(x="Energy (UK)", y = "Count") +
scale_x_continuous(breaks=c(0.25,0.50,0.75,1.00)) +
scale_y_continuous(breaks=seq(0,20,2)) +
annotate("text", x=0.25, y=9, label= "mean = 0.62", size = 3) +
theme(plot.title = element_text(hjust = 0.5), axis.title = element_text(size = 9))
#uk.energy.hist
usa.energy.hist <- ggplot(usa, aes(x=energy))+
geom_histogram(binwidth=.1, color="black", fill="#cd5c5c") +
labs(x="Energy (USA)", y = NULL) +
scale_x_continuous(breaks=c(0.25,0.50,0.75,1.00)) +
scale_y_continuous(breaks=seq(0,20,2)) +
annotate("text", x=0.25, y=15, label= "mean = 0.54", size = 3) +
theme(plot.title = element_text(hjust = 0.5), axis.title = element_text(size = 9))
#usa.energy.hist
#grid.arrange(uk.energy.hist, usa.energy.hist, ncol = 2, bottom=textGrob("Figure 1.5: Histograms of Energy by Country", gp = gpar(fontsize = 9)))
# Histogram for valence variable, side-by-side
uk.valence.hist <- ggplot(uk, aes(x=valence)) +
geom_histogram(binwidth=.1, color="black", fill="#6699cc") +
labs(x="Valence (UK)", y = "Count") +
scale_x_continuous(breaks=c(0.25,0.50,0.75,1.00)) +
scale_y_continuous(breaks=seq(0,20,2)) +
annotate("text", x=0.95, y=8, label= "mean = 0.5", size = 3)+
theme(plot.title = element_text(hjust = 0.5), axis.title = element_text(size = 9))
#uk.valence.hist
usa.valence.hist <- ggplot(usa, aes(x=valence)) +
geom_histogram(binwidth=.1, color="black", fill="#cd5c5c") +
labs(x="Valence (USA)", y = NULL) +
scale_x_continuous(breaks=c(0.25,0.50,0.75,1.00)) +
scale_y_continuous(breaks=seq(0,20,2)) +
annotate("text", x=0.85, y=10, label= "mean = 0.4", size = 3) +
theme(plot.title = element_text(hjust = 0.5), axis.title = element_text(size = 9))
#usa.valence.hist
#grid.arrange(uk.valence.hist, usa.valence.hist, ncol = 2, bottom=textGrob("Figure 1.6: Histograms of Valence by Country", gp = gpar(fontsize = 9)))
grid.arrange(uk.dance.hist, usa.dance.hist, uk.energy.hist, usa.energy.hist, uk.valence.hist, usa.valence.hist,ncol = 2, bottom=textGrob("Figure 1.2: Histograms of Variables of Interest", gp = gpar(fontsize = 9)))
library(dplyr)
# grab the Mexico and US Top 50 playlists
mex <- read.csv(mexPath)
# load libraries
library(Rspotify)
library(httr)
library(jsonlite)
library(spotifyr)
library(dplyr)
# authenticate user
my_token <- get_spotify_access_token(client_id='71995685ca2446b2b6e2e41d3e0e5b7a', client_secret='c36f1c3a69a241d4a8d45240c42873b0')
# grab the playlist of Top 50 Mexico
mex <- get_playlist_audio_features(
username = 'spotify',
playlist_uris = '37i9dQZEVXbO3qyFxbkOE1',
authorization = my_token)
# select the columns we want
filteredMex <- mex %>% select(track.name, track.album.release_date, track.popularity, track.album.album_type, track.duration_ms, danceability, energy, loudness, speechiness, acousticness, instrumentalness, liveness, valence, tempo)
# add playlist column
filteredMex$Playlist <- 'Mex50'
# export to csv, commenting out because we don't need to do this again
# write.csv(filteredE, './edyPlaylist.csv')
# show first 5 rows
df <- as.data.frame(filteredMex)
head(df)
# creating variable for file paths
edyPath <- './GitHub/edyPlaylist.csv'
usPath <- './GitHub/filtered_usa_top50.csv'
mexPath <- './Github/mex50.csv'
ukPath <- './GitHub/filtered_uk_top50.csv'
decadesPath <- "./GitHub/spotify_decades.csv"
library(dplyr)
# grab the Mexico and US Top 50 playlists
mex <- read.csv(mexPath)
us <- read.csv(usPath)
# add an identifier column to the us playlist
us$Playlist <- 'US50'
# put both data frames into one
both <- bind_rows(mex, us)
# create the jitterplot for valence
library(ggplot2)
library(ggdark)
ggplot(both, aes(x=Playlist, y=valence, color=Playlist)) +
geom_jitter(position=position_jitter(0.05), cex=2, shape=16) +
stat_summary(fun.y=mean, geom='point', shape=18, size=3, color='black') +
ggtitle('Comparing Valence for the Mexico and USA Top 50 Songs') +
theme(plot.title = element_text(hjust = 0.5, size=16), plot.caption = element_text(hjust = 0.5)) +
ylab('Valence') +
xlab('Playlist') +
theme(legend.position='none') +
scale_color_manual(values=c("#78866b", "#cd5c5c")) +
labs(caption = 'Figure 3.1: Distribution of Valence for Mexico and USA Top 50')
#dark_mode()
library(ggplot2)
ggplot(both, aes(x=Playlist, y=danceability, color=Playlist)) +
geom_jitter(position=position_jitter(0.05), cex=2, shape=16) +
stat_summary(fun.y=mean, geom='point', shape=18, size=3, color='black') +
ggtitle('Comparing Danceability for the Mexico and USA Top 50 Songs') +
theme(plot.title = element_text(hjust = 0.5, size=16), plot.caption = element_text(hjust = 0.5)) +
ylab('Danceability') +
xlab('Playlist') +
theme(legend.position='none') +
scale_color_manual(values=c("#78866b", "#cd5c5c")) +
labs(caption = 'Figure 3.2: Distribution of Danceability for Mexico and USA Top 50')
# code for the MANOVA test
r.manova <- manova(cbind(danceability, valence) ~ Playlist, data=both)
summary(r.manova)
# more info
summary.aov(r.manova)
summary(r.manova)
# more info
summary.aov(r.manova)
