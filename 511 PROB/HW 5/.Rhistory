# import the dataset
fish <- read.csv('./FishMercury.csv')
mercury <- fish$Mercury
head(fish)
boxplot(fish$Mercury)
set.seed(42)
# bootstrap
mercury.boot <- replicate(1000, mean(sample(mercury, length(fish$Mercury), replace=TRUE)))
# mean of the bootstrap
boot.mean <- mean(mercury.boot)
boot.mean
# bootstrap standard error
boot.sd <- sd(mercury.boot)
boot.sd
# 95% bootstrap percentile interval
quantile(mercury.boot, c(0.025, 0.975))
set.seed(42)
# bootstrap
mercury.boot <- replicate(1000, mean(sample(mercury, length(fish$Mercury), replace=TRUE)))
# mean of the bootstrap
boot.mean <- mean(mercury.boot)
print(paste0('The bootstrap mean is: '), boot.mean)
set.seed(42)
# bootstrap
mercury.boot <- replicate(1000, mean(sample(mercury, length(fish$Mercury), replace=TRUE)))
# mean of the bootstrap
boot.mean <- mean(mercury.boot)
print(paste0('The bootstrap mean is: ', boot.mean))
# bootstrap standard error
boot.sd <- sd(mercury.boot)
boot.sd
# 95% bootstrap percentile interval
quantile(mercury.boot, c(0.025, 0.975))
set.seed(42)
# bootstrap
mercury.boot <- replicate(1000, mean(sample(mercury, length(fish$Mercury), replace=TRUE)))
# mean of the bootstrap
boot.mean <- mean(mercury.boot)
print(paste0('The bootstrap mean is: ', boot.mean))
# bootstrap standard error
boot.sd <- sd(mercury.boot)
print(paste0('The bootstrap standard error is: ', boot.sd))
# 95% bootstrap percentile interval
quantile(mercury.boot, c(0.025, 0.975))
set.seed(42)
# removing the outlier
newMercury <- fish[fish$Mercury != max(fish$Mercury),]
# bootstrap
newM.boot <- replicate(1000, mean(sample(newMercury, 29, replace=TRUE)))
# mean
newM.boot.mean <- mean(newM.boot)
newM.boot.mean
# stnadard error
newM.boot.sd <- sd(newM.boot)
newM.boot.sd
# quantile range
quantile(newM.boot, c(0.025,0.975))
set.seed(42)
# removing the outlier
newMercury <- fish[fish$Mercury != max(fish$Mercury),]
# bootstrap
newM.boot <- replicate(1000, mean(sample(newMercury, 29, replace=TRUE)))
# mean
newM.boot.mean <- mean(newM.boot)
newM.boot.mean
# stnadard error
newM.boot.sd <- sd(newM.boot)
newM.boot.sd
# quantile range
quantile(newM.boot, c(0.025,0.975))
c <- read.csv('./Cereals.csv')
head(c)
tt <- table(c$Age, c$Shelf)
tt
chisq.test(tt)
chisq.test(tt, correct=FALSE)
chisq.test(tt, correct=FALSE)
chisq.test(tt, correct=TRUE)
set.seed(42)
# get the values from the distributions
A <- rnorm(20)
B <- rnorm(30,1,2)
AB <- c(A, B)
# create empty dataframe and add column anmes
df <- data.frame(matrix(ncol = 2, nrow = 50))
x <- c("Distribution", "Value")
colnames(df) <- x
# assign AB vector to the value column
df$Value <- AB
# add the labels to their respective values
df$Distribution[1:20] <- 'A'
df$Distribution[21:50] <- 'B'
# take a look at the dataframe
df
# difference in means function
f.1 = function(df){
agg <- aggregate(Value ~ Distribution, data = df, FUN = mean)
return(agg$Value[2]-agg$Value[1])
}
(test.1 <- f.1(df))
# permutation test
df.permute <- df
permute <- function(){
df.permute$Distribution = df.permute$Distribution[sample(50,50,replace=F)]
return(f.1(df.permute))
}
# do it 1000 times
test.2 <- replicate(1000, permute())
# find p-value
mean(test.1>test.2)
set.seed(42)
# get the values from the distributions
A <- rnorm(20)
B <- rnorm(30,1,2)
AB <- c(A, B)
# create empty dataframe and add column anmes
df <- data.frame(matrix(ncol = 2, nrow = 50))
x <- c("Distribution", "Value")
colnames(df) <- x
# assign AB vector to the value column
df$Value <- AB
# add the labels to their respective values
df$Distribution[1:20] <- 'A'
df$Distribution[21:50] <- 'B'
# take a look at the dataframe
df
# difference in means function
f.1 = function(df){
agg <- aggregate(Value ~ Distribution, data = df, FUN = mean)
return(agg$Value[2]-agg$Value[1])
}
(test.1 <- f.1(df))
# permutation test
df.permute <- df
permute <- function(){
df.permute$Distribution = df.permute$Distribution[sample(50,50,replace=F)]
return(f.1(df.permute))
}
# do it 1000 times
test.2 <- replicate(1000, permute())
# find p-value
mean(test.1>test.2)
View(df)
View(df.permute)
# take a look at the dataframe
df
set.seed(42)
# get the values from the distributions
A <- rnorm(20)
B <- rnorm(30,1,2)
AB <- c(A, B)
# create empty dataframe and add column names
df <- data.frame(matrix(ncol = 2, nrow = 50))
x <- c("Distribution", "Value")
colnames(df) <- x
# assign AB vector to the value column
df$Value <- AB
# add the labels to their respective values
df$Distribution[1:20] <- 'A'
df$Distribution[21:50] <- 'B'
# take a look at the dataframe
df
aggregate(Value ~ Distribution, data = df, FUN = mean)
(test.1 <- f.1(df))
# permutation test
df.permute <- df
permute <- function(){
df.permute$Distribution = df.permute$Distribution[sample(50,50,replace=F)]
return(f.1(df.permute))
}
# do it 1000 times
test.2 <- replicate(1000, permute())
# find p-value
mean(test.1>test.2)
set.seed(42)
# get the values from the distributions
A <- rnorm(20)
B <- rnorm(30,1,2)
AB <- c(A, B)
# create empty dataframe and add column names
df <- data.frame(matrix(ncol = 2, nrow = 50))
x <- c("Distribution", "Value")
colnames(df) <- x
# assign AB vector to the value column
df$Value <- AB
# add the labels to their respective values
df$Distribution[1:20] <- 'A'
df$Distribution[21:50] <- 'B'
# take a look at the dataframe
df
# difference in means function
f.1 = function(df){
agg <- aggregate(Value ~ Distribution, data = df, FUN = mean)
# mean B - mean A
return(agg$Value[2]-agg$Value[1])
}
(test.1 <- f.1(df))
# permutation test
df.permute <- df
permute <- function(){
df.permute$Distribution = df.permute$Distribution[sample(50,50,replace=F)]
return(f.1(df.permute))
}
# do it 10000 times
test.2 <- replicate(10000, permute())
# find p-value
mean(test.1>test.2)
# load the dataset
art <- read.csv('./Artists.csv')
head(art)
library(ggplot2)
ggplot(data=art, aes(x=artist_name, y=liveness, fill=artist_name)) +
geom_boxplot()
set.seed(42)
# bootstrap
boot.ts <- replicate(1000, mean(sample(TS.live, length(TS.live), replace=TRUE)))
TS.live <- subset(art, select=liveness, subset=artist_name=='Taylor Swift', drop=T)
B.live <- subset(art, select=liveness, subset=artist_name=='Beyoncé', drop=T)
t.test(B.live, TS.live, alt='greater')
set.seed(42)
# bootstrap
boot.ts <- replicate(1000, mean(sample(TS.live, length(TS.live), replace=TRUE)))
boot.b <- replicate(1000, mean(sample(B.live, length(B.live), replace=TRUE)))
# divide the vector to get the ratios
boot.ratio <- boot.b/boot.ts
# get the mean and standard deviation of the boot ratio
mean.boot <- mean(boot.ratio)
sd.boot <- sd(boot.ratio)
# getting the left and right confidence interval
rci <- mean.boot + 2*sd.boot
lci <- mean.boot - 2*sd.boot
paste0('We are 95% confident that the ratio of means between Beyoncé and Taylor Swifts speechiness is between ', lci, ' and ', rci)
quantile(boot.ratio, c(0.025, 0.975))
paste0('We are 95% confident that the ratio of means between Beyoncé and Taylor Swifts speechiness is between ', lci, ' and ', rci)
quantile(boot.ratio, c(0.025, 0.975))
girls <- read.csv('./Girls2004.csv')
head(girls)
library(tidyverse)
library(ggplot2)
girls %>%
ggplot(aes(x=Smoker, y=Weight, fill=Smoker)) +
geom_boxplot() +
ggtitle('Weight of babies born to smokers and non-smokers')
# getting the subsets
W.NS <- subset(girls, select=Weight, subset=Smoker=='No', drop=T)
W.S <- subset(girls, select=Weight, subset=Smoker=='Yes', drop=T)
t.test(W.NS, W.S, alt='greater')
set.seed(42)
# get the values from the distributions
A <- rnorm(20)
B <- rnorm(30,1,2)
AB <- c(A, B)
# create empty dataframe and add column names
df <- data.frame(matrix(ncol = 2, nrow = 50))
x <- c("Distribution", "Value")
colnames(df) <- x
# assign AB vector to the value column
df$Value <- AB
# add the labels to their respective values
df$Distribution[1:20] <- 'A'
df$Distribution[21:50] <- 'B'
# take a look at the dataframe
df
# difference in means function
f.1 = function(df){
agg <- aggregate(Value ~ Distribution, data = df, FUN = mean)
# mean B - mean A
return(agg$Value[2]-agg$Value[1])
}
(test.1 <- f.1(df))
# permutation test
df.permute <- df
permute <- function(){
df.permute$Distribution = df.permute$Distribution[sample(length(df$Distribution),length(df$Distribution),replace=F)]
return(f.1(df.permute))
}
# do it 1000 times
test.2 <- replicate(1000, permute())
# find p-value
mean(test.1>test.2)
set.seed(42)
# get the values from the distributions
A <- rnorm(20)
B <- rnorm(30,1,2)
AB <- c(A, B)
# create empty dataframe and add column names
df <- data.frame(matrix(ncol = 2, nrow = 50))
x <- c("Distribution", "Value")
colnames(df) <- x
# assign AB vector to the value column
df$Value <- AB
# add the labels to their respective values
df$Distribution[1:20] <- 'A'
df$Distribution[21:50] <- 'B'
# take a look at the dataframe
df
# difference in means function
f.1 = function(df){
agg <- aggregate(Value ~ Distribution, data = df, FUN = mean)
# mean B - mean A
return(agg$Value[2]-agg$Value[1])
}
# permutation test
df.permute <- df
permute <- function(){
df.permute$Distribution = df.permute$Distribution[sample(length(df$Distribution),length(df$Distribution),replace=F)]
return(f.1(df.permute))
}
# do it 1000 times
test.1 <- replicate(1000, permute())
# find p-value
mean(test.1>test.2)
# find p-value
mean(test.1>f.1(df))
set.seed(1)
# get the values from the distributions
A <- rnorm(20)
B <- rnorm(30,1,2)
AB <- c(A, B)
# create empty dataframe and add column names
df <- data.frame(matrix(ncol = 2, nrow = 50))
x <- c("Distribution", "Value")
colnames(df) <- x
# assign AB vector to the value column
df$Value <- AB
# add the labels to their respective values
df$Distribution[1:20] <- 'A'
df$Distribution[21:50] <- 'B'
# take a look at the dataframe
df
# difference in means function
f.1 = function(df){
agg <- aggregate(Value ~ Distribution, data = df, FUN = mean)
# mean B - mean A
return(agg$Value[2]-agg$Value[1])
}
# create a permutation df
df.permute <- df
# permutation test
permute <- function(){
df.permute$Distribution = df.permute$Distribution[sample(length(df$Distribution),length(df$Distribution),replace=F)]
return(f.1(df.permute))
}
# do it 1000 times
test.1 <- replicate(1000, permute())
# find p-value
mean(test.1>f.1(df))
set.seed(2)
# get the values from the distributions
A <- rnorm(20)
B <- rnorm(30,1,2)
AB <- c(A, B)
# create empty dataframe and add column names
df <- data.frame(matrix(ncol = 2, nrow = 50))
x <- c("Distribution", "Value")
colnames(df) <- x
# assign AB vector to the value column
df$Value <- AB
# add the labels to their respective values
df$Distribution[1:20] <- 'A'
df$Distribution[21:50] <- 'B'
# take a look at the dataframe
df
# difference in means function
f.1 = function(df){
agg <- aggregate(Value ~ Distribution, data = df, FUN = mean)
# mean B - mean A
return(agg$Value[2]-agg$Value[1])
}
# create a permutation df
df.permute <- df
# permutation test
permute <- function(){
df.permute$Distribution = df.permute$Distribution[sample(length(df$Distribution),length(df$Distribution),replace=F)]
return(f.1(df.permute))
}
# do it 1000 times
test.1 <- replicate(1000, permute())
# find p-value
mean(test.1>f.1(df))
set.seed(30)
# get the values from the distributions
A <- rnorm(20)
B <- rnorm(30,1,2)
AB <- c(A, B)
# create empty dataframe and add column names
df <- data.frame(matrix(ncol = 2, nrow = 50))
x <- c("Distribution", "Value")
colnames(df) <- x
# assign AB vector to the value column
df$Value <- AB
# add the labels to their respective values
df$Distribution[1:20] <- 'A'
df$Distribution[21:50] <- 'B'
# take a look at the dataframe
df
# difference in means function
f.1 = function(df){
agg <- aggregate(Value ~ Distribution, data = df, FUN = mean)
# mean B - mean A
return(agg$Value[2]-agg$Value[1])
}
# create a permutation df
df.permute <- df
# permutation test
permute <- function(){
df.permute$Distribution = df.permute$Distribution[sample(length(df$Distribution),length(df$Distribution),replace=F)]
return(f.1(df.permute))
}
# do it 1000 times
test.1 <- replicate(1000, permute())
# find p-value
mean(test.1>f.1(df))
set.seed(1)
# get the values from the distributions
A <- rnorm(20)
B <- rnorm(30,1,2)
AB <- c(A, B)
# create empty dataframe and add column names
df <- data.frame(matrix(ncol = 2, nrow = 50))
x <- c("Distribution", "Value")
colnames(df) <- x
# assign AB vector to the value column
df$Value <- AB
# add the labels to their respective values
df$Distribution[1:20] <- 'A'
df$Distribution[21:50] <- 'B'
# take a look at the dataframe
df
# difference in means function
f.1 = function(df){
agg <- aggregate(Value ~ Distribution, data = df, FUN = mean)
# mean B - mean A
return(agg$Value[2]-agg$Value[1])
}
# create a permutation df
df.permute <- df
# permutation test
permute <- function(){
df.permute$Distribution = df.permute$Distribution[sample(length(df$Distribution),length(df$Distribution),replace=F)]
return(f.1(df.permute))
}
# do it 1000 times
test.1 <- replicate(1000, permute())
# find p-value
mean(test.1>f.1(df))
