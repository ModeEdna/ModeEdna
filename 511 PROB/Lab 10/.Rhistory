mean(18.1>test.2)
library(ggplot2)
ggplot(data=df, aes(x=artist_name, y=speechiness, fill=artist_name)) +
geom_boxplot()
df <- read.csv('./Artists.csv')
library(ggplot2)
ggplot(data=df, aes(x=artist_name, y=speechiness, fill=artist_name)) +
geom_boxplot()
set.seed(22)
speechT <- subset(df, select=speechiness,
subset=artist_name=="Taylor Swift", drop=T)
speechJ  <- subset(df, select=speechiness,
subset=artist_name=="John Legend", drop=T)
t.test(speechT, speechJ, alt="greater")
set.seed(22)
# replicate the sampling 10000 times
boot.ts <- replicate(10000, mean(sample(speechT, length(speechT), replace = TRUE)))
boot.jl <- replicate(10000, mean(sample(speechJ, length(speechJ), replace = TRUE)))
# divide the vectors to get the ratio
boot.ratio <- boot.ts/boot.jl
# get the mean and sd of the ratio vector
mean.boot <- mean(boot.ratio)
sd.boot <- sd(boot.ratio)
rci <- mean.boot + 2*sd.boot
lci <- mean.boot - 2*sd.boot
paste0('We are 95% confident that the ratio of means between Taylors and Legends speechiness is between ', lci, ' and ', rci)
real.bias <- mean(speechT)/mean(speechJ)
paste0('The bias for the mean ratio is:', mean.boot-real.bias)
library(dplyr)
# creating the column based on cases
df <- df %>%
mutate(Valence_C = case_when(
Valence <= 0.49 ~ 'more negative',
Valence <= 0.79 ~ 'Moderate',
Valence > 0.8 ~ 'more positive')
)
tt <- table(df$artist_name, df$Valence_C)
# table with counts of valence for each artist
tt
# getting info needed for table of expected counts
r <- rowSums(tt)
c <- colSums(tt)
N = sum(tt)
# table with the expected counts of valence per artist
(expected <- round(outer(r,c)/N,2))
# test to see if null hypothesis holds
chisq.test(tt)
df <- read.csv('./GSS2002.csv')
table <- table(df$Religion, df$DeathPenalty)
table
df.clean <- df[!is.na(df$Religion),]
df.clean <- df.clean[!is.na(df.clean$DeathPenalty),]
table.clean <- table(df.clean$Religion, df.clean$DeathPenalty)
table.clean
# using the function from the diary
chi = function(A){
r <- rowSums(A)
c <- colSums(A)
N = sum(A)
expected <- outer(r,c)/N
return(sum((A-expected)^2/expected))
}
# chi square statistic
chi.stat = chi(table.clean)
chi.stat
# p value
pchisq(chi.stat, df=12, lower.tail = F)
set.seed(42)
# create a df with only the two columns we care about
df.clean2 <- df.clean %>% select(Religion, DeathPenalty)
chi2 = function(B){
perm <- B[sample(length(B$Religion), 100, replace=FALSE),]
perm.table <- table(perm)
return(chi(perm.table))
}
# testing the function
test.1 <- chi2(df.clean2)
test.1
set.seed(42)
N = 10000
test.2 <- replicate(N, chi2(df.clean2))
hist(test.2)
abline(v = 18.1, col = 2, lwd = 2)
mean(18.1>test.2)
chisq.test(table.clean)
chisq.test(table.clean)
mean(18.1>test.2)
mean(18.1<test.2)
set.seed(1)
N = 10000
test.2 <- replicate(N, chi2(df.clean2))
hist(test.2)
abline(v = 18.1, col = 2, lwd = 2)
mean(18.1<test.2)
set.seed(1)
N = 1000
test.2 <- replicate(N, chi2(df.clean2))
hist(test.2)
abline(v = 18.1, col = 2, lwd = 2)
mean(18.1<test.2)
set.seed(123)
N = 10000
test.2 <- replicate(N, chi2(df.clean2))
hist(test.2)
abline(v = 18.1, col = 2, lwd = 2)
mean(18.1<test.2)
mean(18.199<test.2)
set.seed(123)
N = 10000
test.2 <- replicate(N, chi2(df.clean2))
hist(test.2)
abline(v = 18.1, col = 2, lwd = 2)
N = 10000
test.2 <- replicate(N, chi2(df.clean2))
hist(test.2)
abline(v = 18.1, col = 2, lwd = 2)
N = 10000
test.2 <- replicate(N, chi2(df.clean2))
hist(test.2)
abline(v = 18.1, col = 2, lwd = 2)
N = 10000
test.2 <- replicate(N, chi2(df.clean2))
hist(test.2)
abline(v = 18.1, col = 2, lwd = 2)
N = 10000
test.2 <- replicate(N, chi2(df.clean2))
hist(test.2)
abline(v = 18.1, col = 2, lwd = 2)
N = 10000
test.2 <- replicate(N, chi2(df.clean2))
hist(test.2)
abline(v = 18.1, col = 2, lwd = 2)
N = 10000
test.2 <- replicate(N, chi2(df.clean2))
hist(test.2)
abline(v = 18.1, col = 2, lwd = 2)
N = 10000
test.2 <- replicate(N, chi2(df.clean2))
hist(test.2)
abline(v = 18.1, col = 2, lwd = 2)
N = 10000
test.2 <- replicate(N, chi2(df.clean2))
hist(test.2)
abline(v = 18.1, col = 2, lwd = 2)
N = 10000
test.2 <- replicate(N, chi2(df.clean2))
hist(test.2)
abline(v = 18.1, col = 2, lwd = 2)
set.seed(42)
# create a df with only the two columns we care about
df.clean2 <- df.clean %>% select(Religion, DeathPenalty)
chi2 = function(B){
perm <- B[sample(length(B$Religion), replace=FALSE),]
perm.table <- table(perm)
return(chi(perm.table))
}
# testing the function
test.1 <- chi2(df.clean2)
test.1
N = 10000
test.2 <- replicate(N, chi2(df.clean2))
hist(test.2)
abline(v = 18.1, col = 2, lwd = 2)
set.seed(42)
# create a df with only the two columns we care about
df.clean2 <- df.clean %>% select(Religion, DeathPenalty)
chi2 = function(B){
perm <- B[sample(length(B$Religion), 30,replace=FALSE),]
perm.table <- table(perm)
return(chi(perm.table))
}
# testing the function
test.1 <- chi2(df.clean2)
test.1
N = 10000
test.2 <- replicate(N, chi2(df.clean2))
hist(test.2)
abline(v = 18.1, col = 2, lwd = 2)
set.seed(42)
# create a df with only the two columns we care about
df.clean2 <- df.clean %>% select(Religion, DeathPenalty)
chi2 = function(B){
perm <- B[sample(length(B$Religion), 100, replace=FALSE),]
perm.table <- table(perm)
return(chi(perm.table))
}
# testing the function
test.1 <- chi2(df.clean2)
test.1
N = 10000
test.2 <- replicate(N, chi2(df.clean2))
hist(test.2)
abline(v = 18.1, col = 2, lwd = 2)
set.seed(42)
# create a df with only the two columns we care about
df.clean2 <- df.clean %>% select(Religion, DeathPenalty)
chi2 = function(B){
perm <- B[sample(length(B$Religion), 1000, replace=FALSE),]
perm.table <- table(perm)
return(chi(perm.table))
}
# testing the function
test.1 <- chi2(df.clean2)
test.1
N = 10000
test.2 <- replicate(N, chi2(df.clean2))
hist(test.2)
abline(v = 18.1, col = 2, lwd = 2)
mean(18.199<test.2)
set.seed(42)
# create a df with only the two columns we care about
df.clean2 <- df.clean %>% select(Religion, DeathPenalty)
chi2 = function(B){
perm <- B[sample(B, 1000, replace=FALSE),]
perm.table <- table(perm)
return(chi(perm.table))
}
# testing the function
test.1 <- chi2(df.clean2)
set.seed(42)
# create a df with only the two columns we care about
df.clean2 <- df.clean %>% select(Religion, DeathPenalty)
chi2 = function(B){
perm <- B[sample(length(B$Religion), 1000, replace=FALSE),]
perm.table <- table(perm)
return(chi(perm.table))
}
# testing the function
test.1 <- chi2(df.clean2)
test.1
View(df.clean2)
set.seed(42)
# create a df with only the two columns we care about
df.clean2 <- df.clean %>% select(Religion, DeathPenalty)
chi2 = function(B){
#perm <- B[sample(length(B$Religion), 1000, replace=FALSE),]
B$Religion = B$Religion[sample(length(df.clean2$Religion),length(df.clean2$Religion),replace=F)]
perm.table <- table(perm)
return(chi(perm.table))
}
# testing the function
test.1 <- chi2(df.clean2)
set.seed(42)
# create a df with only the two columns we care about
df.clean2 <- df.clean %>% select(Religion, DeathPenalty)
chi2 = function(B){
#perm <- B[sample(length(B$Religion), 1000, replace=FALSE),]
B$Religion = B$Religion[sample(length(df.clean2$Religion),length(df.clean2$Religion),replace=F)]
perm.table <- table(df.clean2)
return(chi(perm.table))
}
# testing the function
test.1 <- chi2(df.clean2)
test.1
N = 10000
test.2 <- replicate(N, chi2(df.clean2))
hist(test.2)
abline(v = 18.1, col = 2, lwd = 2)
set.seed(42)
# create a df with only the two columns we care about
df.clean2 <- df.clean %>% select(Religion, DeathPenalty)
chi2 = function(B){
#perm <- B[sample(length(B$Religion), 1000, replace=FALSE),]
B$Religion = B$Religion[sample(length(df.clean2$Religion),length(df.clean2$Religion),replace=F)]
perm.table <- table(B)
return(chi(perm.table))
}
# testing the function
test.1 <- chi2(df.clean2)
test.1
N = 10000
test.2 <- replicate(N, chi2(df.clean2))
hist(test.2)
abline(v = 18.1, col = 2, lwd = 2)
mean(18.199<test.2)
set.seed(42)
N = 10000
test.2 <- replicate(N, chi2(df.clean2))
hist(test.2)
abline(v = 18.1, col = 2, lwd = 2)
mean(18.199<test.2)
# creating the function
set.seed(42)
f.1 = function(C){
df.1 <- aggregate(Time ~ Group, data = C, FUN = mean)
return(df.1$Time[1]-df.1$Time[2])
}
# testing the function
test.1 <- f.1(Verizon)
Verizon <- read.csv("Verizon.csv")
head(Verizon)
table(Verizon$Group)
boxplot(Time ~ Group, data = Verizon)
boxplot(log10(Time) ~ Group, data = Verizon)
aggregate(Time ~ Group, data = Verizon, FUN = mean)
# creating the function
set.seed(42)
f.1 = function(C){
df.1 <- aggregate(Time ~ Group, data = C, FUN = mean)
return(df.1$Time[1]-df.1$Time[2])
}
# testing the function
test.1 <- f.1(Verizon)
test.1
set.seed(123)
# permuting
ver.perm <- Verizon
ver.perm$Group = ver.perm$Group[sample(length(ver.perm$Time),length(ver.perm$Time),replace=F)]
# calling the previous function on the permutation
f.1(perm.1)
set.seed(123)
# permuting
ver.perm <- Verizon
ver.perm$Group = ver.perm$Group[sample(length(ver.perm$Time),length(ver.perm$Time),replace=F)]
# calling the previous function on the permutation
f.1(ver.perm)
set.seed(123)
perms.means <- replicate(10000, ver.perm$Group[sample(length(ver.perm$Time),length(ver.perm$Time),replace=F)] )
hist(perms.means)
View(perms.means)
set.seed(123)
perms.means <- replicate(10000, f.1(ver.perm$Group[sample(length(ver.perm$Time),length(ver.perm$Time),replace=F)] ))
set.seed(123)
# permuting
ver.perm <- Verizon
ver.perm$Time = ver.perm$Time[sample(length(ver.perm$Time),length(ver.perm$Time),replace=F)]
# calling the previous function on the permutation
f.1(ver.perm)
set.seed(123)
# permuting
ver.perm <- Verizon
ver.perm$Time = ver.perm$Time[sample(length(ver.perm$Time),length(ver.perm$Time),replace=F)]
# calling the previous function on the permutation
f.1(ver.perm)
set.seed(123)
# permuting
ver.perm <- Verizon
ver.perm$Time = ver.perm$Time[sample(length(ver.perm$Time),length(ver.perm$Time),replace=F)]
# calling the previous function on the permutation
f.1(ver.perm)
per.means <- c()
for (i in 1,1000){
per.means <- c()
for(i in 1,1000){
per.means <- c()
for(i in 1:1000){
ver.perm <- Verizon
ver.perm$Time = ver.perm$Time[sample(length(ver.perm$Time),length(ver.perm$Time),replace=F)]
per.means <- c(per.means, f.1(ver.perm))
}
hist(per.means)
#abline(v = test.1, col = 2, lwd = 2)
per.means <- c()
for(i in 1:1000){
ver.perm <- Verizon
ver.perm$Time = ver.perm$Time[sample(length(ver.perm$Time),length(ver.perm$Time),replace=F)]
per.means <- c(per.means, f.1(ver.perm))
}
hist(per.means)
abline(v = 8.09, col = 2, lwd = 2)
per.means <- c()
for(i in 1:1000){
ver.perm <- Verizon
ver.perm$Time = ver.perm$Time[sample(length(ver.perm$Time),length(ver.perm$Time),replace=F)]
per.means <- c(per.means, f.1(ver.perm))
}
hist(per.means)
abline(v = 8.09, col = 2, lwd = 2)
per.means <- c()
for(i in 1:1000){
ver.perm <- Verizon
ver.perm$Time = ver.perm$Time[sample(length(ver.perm$Time),length(ver.perm$Time),replace=F)]
per.means <- c(per.means, f.1(ver.perm))
}
hist(per.means)
abline(v = 8.09, col = 2, lwd = 2)
set.seed(42)
per.means <- c()
for(i in 1:1000){
ver.perm <- Verizon
ver.perm$Time = ver.perm$Time[sample(length(ver.perm$Time),length(ver.perm$Time),replace=F)]
per.means <- c(per.means, f.1(ver.perm))
}
hist(per.means)
abline(v = 8.09, col = 2, lwd = 2)
set.seed(42)
per.means <- c()
for(i in 1:1000){
ver.perm <- Verizon
ver.perm$Time = ver.perm$Time[sample(length(ver.perm$Time),length(ver.perm$Time),replace=F)]
per.means <- c(per.means, f.1(ver.perm))
}
hist(per.means)
abline(v = 8.09, col = 2, lwd = 2)
mean(test.1<perms)
mean(test.1<per.means)
